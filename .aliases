# Easier navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# List alias
alias l="ls -l"
alias la="ls -la"
alias lsd='ls -l | grep "^d"'

# Set ls color for MacOS
# if [[ "$OSTYPE" =~ ^darwin ]]; then
#   alias ls="command ls -G"
# fi

# Quick home
function home() {
  cd ~/$@
}

# Quick move
alias home=home

# Applications alias
alias nppm='pnpm'
alias ppm='pnpm'
alias vim='nvim'

# Move to Neovim config folders
alias nvim-dir='cd ~/.config/nvim'

# Move to Code folder
alias projects="cd ~/Projects"
alias pf-backend="cd ~/Projects/Pedefacil/pedefacil-backend"
alias pf-web="cd ~/Projects/Pedefacil/web"
alias pf-mobile="cd ~/Projects/Pedefacil/mobile"

# Move to Download folder
alias downloads="cd ~/Downloads"

# Pretty json
alias prettyjson="python -m json.tool | pygmentize -l json"

# Sha1 generation
function sha1() {
  echo -n $@ | openssl sha1
}
alias sha1=sha1

# Random number
# Usage: `rand` will produce a random number between 1 and 6
# Usage: `rand 100` will produce a random number between 1 and 100
function rand() {
  if [[ -n "$@" ]]; then
    echo $[RANDOM%$@+1];
  else
    echo $[RANDOM%6+1];
  fi;
}
alias rand=rand

# Get a password in keychain
# Usage `getpassword {ssid}`
# function getpassword() {
#   if [[ -n "$@" ]]; then
#     security find-generic-password -ga $@ | grep "password:"
#   else
#
#     airport="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport"
#     ssid="`$airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'`"
#
#     if [[ "$ssid" != "" ]]; then
#       getpassword $ssid
#       return
#     fi;
#
#     echo "ERROR: You are not connected to any wifi so you should pass an ssid to search for: getpassword {ssid}"
#   fi;
# }
# alias getpassword=getpassword

# Reload bashrc
alias reload=". ~/.zshrc"
alias sozsh="exec zsh"

# Apps
# alias xcode="open -a '/Developer/Applications/Xcode.app'"
# alias safari="open -a safari"
alias chrome="open -a google\ chrome"

# Open the git repository in the browser if git remote origin is defined
function gh_repo() {
  if [[ $(git remote -v 2> /dev/null) ]]; then
    git remote -v | grep origin | awk '{ print $2 }' | head -1 | xargs open
  else
    echo "Can't find 'origin' repository in this path"
  fi
}
alias ghrepo=gh_repo

# Open the git branch in the browser
function gh_branch() {
  branch="`git rev-parse --abbrev-ref HEAD`"
  repo="`git remote -v | grep origin | awk '{ print $2 }' | head -1 | sed 's/\.git//'`"

  open "$repo/tree/$branch"
}
alias ghbranch=gh_branch

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

# Scripts
alias usedPort='usedPort.sh'
alias monitor-cpu-freq='monitor-cpu-freq.sh'

# RN Development
alias ipod="cd ios && pod install && .."

#Intel Platform
alias intel="arch -x86_64"

# Where should I put you?
bindkey -s ^f "tmux-sessionizer\n"

# Git commands
setupWorkGitlab() {
    git config user.name "Jo√£o Viegas"
    git config user.email "joao.viegas@rummo.com"
}

setupPersonalGithub() {
    git config user.name "Jo√£o Vitor Viegas R√™go"
    git config user.email "jvrviegas@gmail.com"
}

# HiveOS commands
connectToHive() {
    ssh user@192.168.25.11
}

# Linters Commands
lintersStatus() {
    echo "ESLint \t"
    eslint_d status
    echo "\n"
    echo "Prettier \t"
    prettierd status
}

lintersRestart() {
    echo "Cleaning linters..."
    eslint_d restart
    prettierd restart
    echo "Linters cleaned..."
}

